{"version":3,"sources":["App.js","index.js"],"names":["VIEW_TX_URL","App","useState","currentAccount","setCurrentAccount","maxNftCount","setMaxNftCount","mintedNftCount","setMintedNftCount","isLoading","setIsLoading","nftTxnHash","setNftTxnHash","checkIfWalletIsConnected","a","window","ethereum","console","log","getNftCounts","request","method","accounts","length","account","useEffect","connectWallet","alert","myEpicNftContract","createContract","getMaxEpicNFTCount","getMintedEpicNFTCount","Number","mintNft","makeAnEpicNFT","nftTxn","hash","wait","onNewNftMintedHandler","from","tokenId","prev","signer","ethers","providers","Web3Provider","getSigner","Contract","contractMeta","abi","on","registerOnNewNftMintedHandler","buildEtherscanTxnUrl","className","src","alt","onClick","disabled","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.782bd0cc.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nimport \"./App.css\";\n\nimport contractMeta from \"./contract_meta.json\";\n\nconst CONTRACT_ADDRESS = \"0xF4Ee9052BA82C66d44f074a0a843E9D33D5bE117\";\n\nconst VIEW_COLLECTION_URL = \"https://testnets.opensea.io/collection/threeflavoricecreamnft-y1nal595gq\";\nconst VIEW_TX_URL = \"https://rinkeby.etherscan.io/tx/\";\n\n const App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const [maxNftCount, setMaxNftCount] = useState(0);\n  const [mintedNftCount, setMintedNftCount] = useState(0);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [nftTxnHash, setNftTxnHash] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    // Check if we have access to window.ethereum\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask!\");\n      return\n    }\n\n    // Query NFT counts\n    getNftCounts();\n\n    try {\n      // Get connected accounts\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n      \n      // Check if there is a connected account\n      if (accounts.length === 0) {\n        console.log(\"No authorized account found!\");\n        return;\n      }\n\n      // Get first connected account\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n\n      // Update state\n      setCurrentAccount(account);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const connectWallet = async () => {\n    const { ethereum } = window;\n\n    // Check if we have access to window.ethereum\n    if (!ethereum) {\n      alert(\"Get MetaMask!\");\n      return;\n    }\n\n    try {\n      // Request account access\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      // Get first connected account\n      const account = accounts[0];\n\n      console.log(\"Connected account: \", account);\n\n      // Update state\n      setCurrentAccount(account);\n\n      // Query NFT counts\n      getNftCounts();\n    } catch (error) {\n      console.log(error)\n    }\n  };\n\n  const getNftCounts = async () => {\n    try {\n      // Get contract\n      const myEpicNftContract = createContract();\n\n      // Get NFT counts from contract\n      const maxNftCount = await myEpicNftContract.getMaxEpicNFTCount();\n      const mintedNftCount = await myEpicNftContract.getMintedEpicNFTCount();\n\n      console.log(\"NFTs max: \", Number(maxNftCount));\n      console.log(\"NFTs minted: \", Number(mintedNftCount));\n\n      // Update state\n      setMaxNftCount(Number(maxNftCount));\n      setMintedNftCount(Number(mintedNftCount));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const mintNft = async () => {\n    try {\n      // Get contract\n      const myEpicNftContract = createContract();\n\n      // Execute the mint on contract\n      let nftTxn = await myEpicNftContract.makeAnEpicNFT();\n\n      // Wait for mining of transaction\n      console.log(\"Mining ... \", nftTxn.hash);\n      setIsLoading(true);\n      await nftTxn.wait();\n      setIsLoading(false);\n      console.log(\"Mined \", nftTxn.hash);\n\n      setNftTxnHash(nftTxn.hash);\n      \n      // Log Etherscan URL\n      console.log(\"NFT minted, see transaction: \", VIEW_TX_URL + nftTxn.hash);\n    } catch (error) {\n      console.log(error)\n    }\n  };\n\n  const onNewNftMintedHandler = (from, tokenId) => {\n    console.log(\"New NFT minted.\");\n    setMintedNftCount(prev => prev + 1);\n  };\n\n  const registerOnNewNftMintedHandler = () => {\n    const { ethereum } = window;\n\n    // Check if we have access to window.ethereum\n    if (!ethereum) {\n      return () => {};\n    }\n\n    // Get contract\n    const myEpicNftContract = createContract();\n\n    // Subscribe event 'NewEpicNFTMinted'\n    myEpicNftContract.on(\"NewEpicNFTMinted\", onNewNftMintedHandler);\n\n    return () => {\n      // Unsubscribe event 'NewEpicNFTMinted'\n      myEpicNftContract.off(\"NewEpicNFTMinted\", onNewNftMintedHandler);\n    };\n  };\n\n  useEffect(() => {\n    registerOnNewNftMintedHandler();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function createContract() {\n    // Get Web3 provider/signer\n    const { ethereum } = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n\n    // Get contract\n    return new ethers.Contract(CONTRACT_ADDRESS, contractMeta.abi, signer);\n  }\n\n  const renderNftCounter = () => (\n    <p className=\"small-text\">Only {maxNftCount-mintedNftCount} / {maxNftCount} available.</p>\n  )\n\n  const renderConnectedWalletButton = () => (\n    <button className=\"button\" onClick={connectWallet}>\n      Connect Wallet\n    </button>\n  );\n\n  const renderMintNftButton = () => (\n    <button\n      className=\"button\"\n      disabled={isLoading}\n      onClick={mintNft}>\n      Mint NFT\n    </button>\n  );\n\n  const renderLoader = () => (\n    <div className=\"loader\" />\n  );\n\n  const buildEtherscanTxnUrl = () => {\n    return VIEW_TX_URL + nftTxnHash;\n  }\n\n  return (\n    <div className=\"main-container\">\n      <img className=\"logo\" src=\"ice_cream.svg\" alt=\"ice cream\" />\n      <h1 className=\"colorized-text\">Three Flavor Ice Cream NFTs</h1>\n      <p className=\"large-text\">Each unique. Each delicious. Discover your ice cream NFT today.</p>\n      <p className=\"medium-text\">Better be quick, they are melting!</p>\n\n      {!currentAccount && (\n        <div className=\"connect-wallet-container\">\n          {renderConnectedWalletButton()}\n        </div>\n      )}\n\n      {currentAccount && renderNftCounter()}\n\n      {currentAccount && (\n        <div className=\"mint-container\">\n          {!isLoading ? renderMintNftButton() : renderLoader()}\n        </div>\n      )}\n\n      <p>\n        <span>Find all Three Flavor Ice Cream NFTs at </span>\n        <a\n          href={VIEW_COLLECTION_URL}\n          target=\"_blank\"\n          rel=\"noreferrer\">\n            OpenSea\n        </a>\n        <span>.</span>\n      </p>\n\n      {currentAccount && nftTxnHash !== \"\" && (\n        <div>\n          <p>Your NFT has been minted. See following transaction at Etherscan.</p>\n          <a\n            href={buildEtherscanTxnUrl()}\n            target=\"_blank\"\n            rel=\"noreferrer\">\n              {buildEtherscanTxnUrl()}\n          </a>\n        </div>\n      )}\n\n      <div className=\"about-container\">\n        <p>\n          <span>build with 🦄 </span>\n          <a href=\"https://buildspace.so\" className=\"colorized-text\">buildspace</a>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}